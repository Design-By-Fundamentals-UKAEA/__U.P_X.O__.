__name__ = "UPXO"
__author__ = "Dr. Sunil Anandatheertha"
__version__ = "1.26.1"
__doc__ = "This module initializes the UPXO and simplifies the pipeline."
import numpy as np
import matplotlib.pyplot as plt
from upxo.geoEntities.mulpoint2d import mulpoint2d
from upxo._sup.dataTypeHandlers import opt, strip_str
from upxo._sup.validation_values import _validation


class gsets():
    """
    Manages grain-structure sets for materials science simulations.

    This class supports initializing and manipulating databases for
    different grain structure types and levels, with a focus on Monte
    Carlo simulations.

    Example:
        from upxo.initialize import gsets
        gsdb = gsets()
        gsdb.initialize(gstype='mc2d')
        print(gsdb.db['l0'])

    Attributes:
        type (str): Placeholder for future use, indicating the type of
                    grain structure.
        db (dict): Database for storing grain structure information.
        dim (int): Placeholder for dimensionality of the grain structure.
    """
    VAL = _validation()
    __slots__ = ('type',
                 'db',
                 'dim',
                 )

    def __init__(self):
        pass

    def initialize(self, gstype='mc2d'):
        """
        Initializes the database with a specified grain structure type.

        Args:
            gstype (str): Type of grain structure simulation. Defaults to
            'mc2d'.
            level (str): The simulation level. Defaults to 'l0'.
        """
        # Validate values
        self.VAL.valstrs((gstype,))
        # Sanitize gstype
        gstype = strip_str(gstype)
        self.db = {'l0': None, 'l1': None, 'l2': None, 'l3': None}

        if gstype in opt.mc_BO_all:
            self.initialize_mcgsl0()
        elif gstype in opt.vt_BO_all:
            self.initialize_vtgsl0()

    def initialize_mcgsl0(self, geoeq=False):
        """
        Sets up Monte Carlo grain structure simulation for level 'l0'.

        It imports and utilizes the Monte Carlo grain structure simulation
        module, performs simulations, detects grains, characterizes
        morphologies, calculates neighboring grains, and generates Voronoi
        Tessellation grain structures based on the simulation results.

        Args:

        """
        from upxo.ggrowth.mcgs import monte_carlo_grain_structure as mcgs
        self.db['l0'] = mcgs()
        if self.db['l0'].uigrid.dim == 2:
            self.db['l0'].simulate()
            self.db['l0'].detect_grains(mcsteps=None,
                                        kernel_order=2,
                                        store_state_ng=True,
                                        library='scikit-image')
            for mt in self.db['l0'].tslices:
                print('Characterising mcgs temporal slice: @{mt}')
                self.db['l0'].gs[mt].char_morph_2d()
            for mt in self.db['l0'].tslices:
                print('Calculating neighbouring grains @ temporal slice: {mt}')
                self.db['l0'].gs[mt].neigh()

    def initialize_vtgs_pds_b_l0(self):
        """
        Sets up a Voronoi Tessellation Grain Structure using a set of points
        generated by Poisson Disc Sampling (pds) using Bridson (b) algorithm
        """
        seedmp = mulpoint2d(method='random',
                            gridding_technique='pds',
                            sampling_technique='bridson1',
                            xbound=[0, 1],
                            ybound=[0, 1],
                            char_length=[0.15, 0],
                            bridson_sampling_k=10,
                            make_point_objects=True,
                            mulpoint_type='seed',
                            lean='ignore')
        plt.plot(seedmp.locx, seedmp.locy, 'ks')

    def initialize_vtgs_dart_l0(self):
        """
        Sets up a Voronoi Tessellation Grain Structure using a set of points
        generated by Dart samplings
        """
        seedmp = mulpoint2d(method='random',
                            gridding_technique='pds',
                            sampling_technique='bridson1',
                            xbound=[0, 1],
                            ybound=[0, 1],
                            char_length=[0.05, 0],
                            bridson_sampling_k=10,
                            make_point_objects=True,
                            mulpoint_type='seed',
                            lean='ignore',
                            )
        seedmp.plot()
